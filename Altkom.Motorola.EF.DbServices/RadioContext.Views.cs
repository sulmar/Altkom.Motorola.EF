//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.Entity.Infrastructure.MappingViews;

[assembly: DbMappingViewCacheTypeAttribute(
    typeof(Altkom.Motorola.EF.DbServices.RadioContext),
    typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySets15b5b433a56e99b10ab5e586e17bf9fbbb7a0cb2aa10566eadd3559f6ee3f434))]

namespace Edm_EntityMappingGeneratedViews
{
    using System;
    using System.CodeDom.Compiler;
    using System.Data.Entity.Core.Metadata.Edm;

    /// <summary>
    /// Implements a mapping view cache.
    /// </summary>
    [GeneratedCode("Entity Framework 6 Power Tools", "0.9.2.0")]
    internal sealed class ViewsForBaseEntitySets15b5b433a56e99b10ab5e586e17bf9fbbb7a0cb2aa10566eadd3559f6ee3f434 : DbMappingViewCache
    {
        /// <summary>
        /// Gets a hash value computed over the mapping closure.
        /// </summary>
        public override string MappingHashValue
        {
            get { return "15b5b433a56e99b10ab5e586e17bf9fbbb7a0cb2aa10566eadd3559f6ee3f434"; }
        }

        /// <summary>
        /// Gets a view corresponding to the specified extent.
        /// </summary>
        /// <param name="extent">The extent.</param>
        /// <returns>The mapping view, or null if the extent is not associated with a mapping view.</returns>
        public override DbMappingView GetView(EntitySetBase extent)
        {
            if (extent == null)
            {
                throw new ArgumentNullException("extent");
            }

            var extentName = extent.EntityContainer.Name + "." + extent.Name;

            if (extentName == "CodeFirstDatabase.Call")
            {
                return GetView0();
            }

            if (extentName == "CodeFirstDatabase.Contact")
            {
                return GetView1();
            }

            if (extentName == "CodeFirstDatabase.Device")
            {
                return GetView2();
            }

            if (extentName == "RadioContext.Calls")
            {
                return GetView3();
            }

            if (extentName == "RadioContext.Call_Sender")
            {
                return GetView4();
            }

            if (extentName == "RadioContext.Device_Calls")
            {
                return GetView5();
            }

            if (extentName == "RadioContext.Call_Source")
            {
                return GetView6();
            }

            if (extentName == "RadioContext.Call_Target")
            {
                return GetView7();
            }

            if (extentName == "RadioContext.Contacts")
            {
                return GetView8();
            }

            if (extentName == "RadioContext.Devices")
            {
                return GetView9();
            }

            return null;
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Call.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView0()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Call
        [CodeFirstDatabaseSchema.Call](T6.Call_Id, T6.Call_BeginCallDate, T6.Call_EndCallDate, T6.Call_ChannelId, T6.Call_IsAnswered, T6.Call_Status, T6.[Call.Sender_Id], T6.[Call.Device_Id], T6.[Call.Source_Id], T6.[Call.Target_Id])
    FROM (
        SELECT T1.Call_Id, T1.Call_BeginCallDate, T1.Call_EndCallDate, T1.Call_ChannelId, T1.Call_IsAnswered, T1.Call_Status, T2.[Call.Sender_Id], T5.[Call.Device_Id], T4.[Call.Source_Id], T3.[Call.Target_Id], T1._from0, (T2._from1 AND T2._from1 IS NOT NULL) AS _from1, (T5._from2 AND T5._from2 IS NOT NULL) AS _from2, (T4._from3 AND T4._from3 IS NOT NULL) AS _from3, (T3._from4 AND T3._from4 IS NOT NULL) AS _from4
        FROM  (
            SELECT 
                T.Id AS Call_Id, 
                T.BeginCallDate AS Call_BeginCallDate, 
                T.EndCallDate AS Call_EndCallDate, 
                T.ChannelId AS Call_ChannelId, 
                T.IsAnswered AS Call_IsAnswered, 
                CAST(T.Status AS [Edm.Int32]) AS Call_Status, 
                True AS _from0
            FROM RadioContext.Calls AS T) AS T1
            LEFT OUTER JOIN (
            SELECT 
                Key(T.Call_Sender_Source).Id AS Call_Id, 
                Key(T.Call_Sender_Target).Id AS [Call.Sender_Id], 
                True AS _from1
            FROM RadioContext.Call_Sender AS T) AS T2
            ON T1.Call_Id = T2.Call_Id
            LEFT OUTER JOIN (
            SELECT 
                Key(T.Call_Target_Source).Id AS Call_Id, 
                Key(T.Call_Target_Target).Id AS [Call.Target_Id], 
                True AS _from4
            FROM RadioContext.Call_Target AS T) AS T3
            ON T1.Call_Id = T3.Call_Id
            LEFT OUTER JOIN (
            SELECT 
                Key(T.Call_Source_Source).Id AS Call_Id, 
                Key(T.Call_Source_Target).Id AS [Call.Source_Id], 
                True AS _from3
            FROM RadioContext.Call_Source AS T) AS T4
            ON T1.Call_Id = T4.Call_Id
            LEFT OUTER JOIN (
            SELECT 
                Key(T.Device_Calls_Target).Id AS Call_Id, 
                Key(T.Device_Calls_Source).Id AS [Call.Device_Id], 
                True AS _from2
            FROM RadioContext.Device_Calls AS T) AS T5
            ON T1.Call_Id = T5.Call_Id
    ) AS T6");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Contact.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView1()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Contact
        [CodeFirstDatabaseSchema.Contact](T2.Contact_Id, T2.Contact_Country, T2.Contact_CompanyName, T2.Contact_IsRemoved, T2.Contact_Name, T2.Contact_FirstName, T2.Contact_LastName, T2.Contact_Discriminator)
    FROM (
        SELECT -- Constructing Discriminator
            T1.Contact_Id, 
            T1.Contact_Country, 
            T1.Contact_CompanyName, 
            T1.Contact_IsRemoved, 
            T1.Contact_Name, 
            T1.Contact_FirstName, 
            T1.Contact_LastName, 
            CASE
                WHEN T1._from2 THEN N'Group'
                ELSE N'User'
            END AS Contact_Discriminator
        FROM (
            SELECT 
                T.Id AS Contact_Id, 
                T.Country AS Contact_Country, 
                T.CompanyName AS Contact_CompanyName, 
                T.IsRemoved AS Contact_IsRemoved, 
                TREAT(T AS [Altkom.Motorola.EF.DbServices.Group]).Name AS Contact_Name, 
                TREAT(T AS [Altkom.Motorola.EF.DbServices.User]).FirstName AS Contact_FirstName, 
                TREAT(T AS [Altkom.Motorola.EF.DbServices.User]).LastName AS Contact_LastName, 
                True AS _from0, 
                CASE WHEN T IS OF (ONLY [Altkom.Motorola.EF.DbServices.User]) THEN True ELSE False END AS _from1, 
                CASE WHEN T IS OF (ONLY [Altkom.Motorola.EF.DbServices.Group]) THEN True ELSE False END AS _from2
            FROM RadioContext.Contacts AS T
        ) AS T1
    ) AS T2");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Device.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView2()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Device
        [CodeFirstDatabaseSchema.Device](T1.Device_Id, T1.Device_Name, T1.Device_Model, T1.Device_Firmware, T1.Device_Description, T1.Device_Color, T1.Device_Weight, T1.Device_RowVersion)
    FROM (
        SELECT 
            T.Id AS Device_Id, 
            T.Name AS Device_Name, 
            T.Model AS Device_Model, 
            T.Firmware AS Device_Firmware, 
            T.Description AS Device_Description, 
            T.Color AS Device_Color, 
            T.Weight AS Device_Weight, 
            T.RowVersion AS Device_RowVersion, 
            True AS _from0
        FROM RadioContext.Devices AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for RadioContext.Calls.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView3()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Calls
        [Altkom.Motorola.EF.DbServices.Call](T1.Call_Id, T1.Call_BeginCallDate, T1.Call_EndCallDate, T1.Call_ChannelId, T1.Call_IsAnswered, T1.Call_Status) WITH 
        RELATIONSHIP(CREATEREF(RadioContext.Contacts, ROW(T1.[Call_Sender.Call_Sender_Target.Id]),[Altkom.Motorola.EF.DbServices.Contact]),[Altkom.Motorola.EF.DbServices.Call_Sender],Call_Sender_Source,Call_Sender_Target) 
        RELATIONSHIP(CREATEREF(RadioContext.Devices, ROW(T1.[Device_Calls.Device_Calls_Source.Id]),[Altkom.Motorola.EF.DbServices.Device]),[Altkom.Motorola.EF.DbServices.Device_Calls],Device_Calls_Target,Device_Calls_Source) 
        RELATIONSHIP(CREATEREF(RadioContext.Devices, ROW(T1.[Call_Source.Call_Source_Target.Id]),[Altkom.Motorola.EF.DbServices.Device]),[Altkom.Motorola.EF.DbServices.Call_Source],Call_Source_Source,Call_Source_Target) 
        RELATIONSHIP(CREATEREF(RadioContext.Devices, ROW(T1.[Call_Target.Call_Target_Target.Id]),[Altkom.Motorola.EF.DbServices.Device]),[Altkom.Motorola.EF.DbServices.Call_Target],Call_Target_Source,Call_Target_Target) 
    FROM (
        SELECT 
            T.Id AS Call_Id, 
            T.BeginCallDate AS Call_BeginCallDate, 
            T.EndCallDate AS Call_EndCallDate, 
            T.ChannelId AS Call_ChannelId, 
            T.IsAnswered AS Call_IsAnswered, 
            CAST(T.Status AS [Altkom.Motorola.EF.DbServices.CallStatus]) AS Call_Status, 
            True AS _from0, 
            T.Sender_Id AS [Call_Sender.Call_Sender_Target.Id], 
            T.Device_Id AS [Device_Calls.Device_Calls_Source.Id], 
            T.Source_Id AS [Call_Source.Call_Source_Target.Id], 
            T.Target_Id AS [Call_Target.Call_Target_Target.Id]
        FROM CodeFirstDatabase.Call AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for RadioContext.Call_Sender.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView4()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Call_Sender
        [Altkom.Motorola.EF.DbServices.Call_Sender](T3.[Call_Sender.Call_Sender_Source], T3.[Call_Sender.Call_Sender_Target])
    FROM (
        SELECT -- Constructing Call_Sender_Source
            CreateRef(RadioContext.Calls, row(T2.[Call_Sender.Call_Sender_Source.Id]), [Altkom.Motorola.EF.DbServices.Call]) AS [Call_Sender.Call_Sender_Source], 
            T2.[Call_Sender.Call_Sender_Target]
        FROM (
            SELECT -- Constructing Call_Sender_Target
                T1.[Call_Sender.Call_Sender_Source.Id], 
                CreateRef(RadioContext.Contacts, row(T1.[Call_Sender.Call_Sender_Target.Id]), [Altkom.Motorola.EF.DbServices.Contact]) AS [Call_Sender.Call_Sender_Target]
            FROM (
                SELECT 
                    T.Id AS [Call_Sender.Call_Sender_Source.Id], 
                    T.Sender_Id AS [Call_Sender.Call_Sender_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.Call AS T
                WHERE T.Sender_Id IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for RadioContext.Device_Calls.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView5()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Device_Calls
        [Altkom.Motorola.EF.DbServices.Device_Calls](T3.[Device_Calls.Device_Calls_Source], T3.[Device_Calls.Device_Calls_Target])
    FROM (
        SELECT -- Constructing Device_Calls_Source
            CreateRef(RadioContext.Devices, row(T2.[Device_Calls.Device_Calls_Source.Id]), [Altkom.Motorola.EF.DbServices.Device]) AS [Device_Calls.Device_Calls_Source], 
            T2.[Device_Calls.Device_Calls_Target]
        FROM (
            SELECT -- Constructing Device_Calls_Target
                T1.[Device_Calls.Device_Calls_Source.Id], 
                CreateRef(RadioContext.Calls, row(T1.[Device_Calls.Device_Calls_Target.Id]), [Altkom.Motorola.EF.DbServices.Call]) AS [Device_Calls.Device_Calls_Target]
            FROM (
                SELECT 
                    T.Device_Id AS [Device_Calls.Device_Calls_Source.Id], 
                    T.Id AS [Device_Calls.Device_Calls_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.Call AS T
                WHERE T.Device_Id IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for RadioContext.Call_Source.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView6()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Call_Source
        [Altkom.Motorola.EF.DbServices.Call_Source](T3.[Call_Source.Call_Source_Source], T3.[Call_Source.Call_Source_Target])
    FROM (
        SELECT -- Constructing Call_Source_Source
            CreateRef(RadioContext.Calls, row(T2.[Call_Source.Call_Source_Source.Id]), [Altkom.Motorola.EF.DbServices.Call]) AS [Call_Source.Call_Source_Source], 
            T2.[Call_Source.Call_Source_Target]
        FROM (
            SELECT -- Constructing Call_Source_Target
                T1.[Call_Source.Call_Source_Source.Id], 
                CreateRef(RadioContext.Devices, row(T1.[Call_Source.Call_Source_Target.Id]), [Altkom.Motorola.EF.DbServices.Device]) AS [Call_Source.Call_Source_Target]
            FROM (
                SELECT 
                    T.Id AS [Call_Source.Call_Source_Source.Id], 
                    T.Source_Id AS [Call_Source.Call_Source_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.Call AS T
                WHERE T.Source_Id IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for RadioContext.Call_Target.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView7()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Call_Target
        [Altkom.Motorola.EF.DbServices.Call_Target](T3.[Call_Target.Call_Target_Source], T3.[Call_Target.Call_Target_Target])
    FROM (
        SELECT -- Constructing Call_Target_Source
            CreateRef(RadioContext.Calls, row(T2.[Call_Target.Call_Target_Source.Id]), [Altkom.Motorola.EF.DbServices.Call]) AS [Call_Target.Call_Target_Source], 
            T2.[Call_Target.Call_Target_Target]
        FROM (
            SELECT -- Constructing Call_Target_Target
                T1.[Call_Target.Call_Target_Source.Id], 
                CreateRef(RadioContext.Devices, row(T1.[Call_Target.Call_Target_Target.Id]), [Altkom.Motorola.EF.DbServices.Device]) AS [Call_Target.Call_Target_Target]
            FROM (
                SELECT 
                    T.Id AS [Call_Target.Call_Target_Source.Id], 
                    T.Target_Id AS [Call_Target.Call_Target_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.Call AS T
                WHERE T.Target_Id IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for RadioContext.Contacts.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView8()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Contacts
        CASE
            WHEN T1._from2 THEN [Altkom.Motorola.EF.DbServices.Group](T1.Contact_Id, T1.Contact_Country, T1.Contact_CompanyName, T1.Contact_IsRemoved, T1.Group_Name)
            ELSE [Altkom.Motorola.EF.DbServices.User](T1.Contact_Id, T1.Contact_Country, T1.Contact_CompanyName, T1.Contact_IsRemoved, T1.User_FirstName, T1.User_LastName)
        END
    FROM (
        SELECT 
            T.Id AS Contact_Id, 
            T.Country AS Contact_Country, 
            T.CompanyName AS Contact_CompanyName, 
            T.IsRemoved AS Contact_IsRemoved, 
            T.Name AS Group_Name, 
            T.FirstName AS User_FirstName, 
            T.LastName AS User_LastName, 
            True AS _from0, 
            CASE WHEN T.Discriminator = N'User' THEN True ELSE False END AS _from1, 
            CASE WHEN T.Discriminator = N'Group' THEN True ELSE False END AS _from2
        FROM CodeFirstDatabase.Contact AS T
        WHERE T.Discriminator IN {N'Group', N'User'}
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for RadioContext.Devices.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView9()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Devices
        [Altkom.Motorola.EF.DbServices.Device](T1.Device_Id, T1.Device_Name, T1.Device_Model, T1.Device_Firmware, T1.Device_Description, T1.Device_Color, T1.Device_Weight, T1.Device_RowVersion)
    FROM (
        SELECT 
            T.Id AS Device_Id, 
            T.Name AS Device_Name, 
            T.Model AS Device_Model, 
            T.Firmware AS Device_Firmware, 
            T.Description AS Device_Description, 
            T.Color AS Device_Color, 
            T.Weight AS Device_Weight, 
            T.RowVersion AS Device_RowVersion, 
            True AS _from0
        FROM CodeFirstDatabase.Device AS T
    ) AS T1");
        }
    }
}
